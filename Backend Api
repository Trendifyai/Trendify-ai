// Importing required modules
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const cors = require('cors');

// Initialize express app
const app = express();
const port = process.env.PORT || 5000;

// Middleware for parsing JSON requests
app.use(bodyParser.json());
app.use(cors());

// Define API route for Trendify AI

// Example API Route - Product Recommendation API
app.post('/api/recommendations', async (req, res) => {
    const { userId } = req.body; // Get user ID from request body

    try {
        // Simulate fetching recommendations from an AI service
        // For this example, we'll mock a recommendation
        const recommendations = await getRecommendations(userId);

        return res.json({
            status: 'success',
            message: 'Recommendations fetched successfully',
            data: recommendations
        });
    } catch (error) {
        return res.status(500).json({
            status: 'error',
            message: 'Failed to fetch recommendations',
            error: error.message
        });
    }
});

// Function to simulate fetching recommendations
const getRecommendations = async (userId) => {
    // Simulate a delay as if calling an AI model
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve([
                { productId: 1, productName: 'AI Powered Vacuum', category: 'Home Appliances' },
                { productId: 2, productName: 'Smartphone 5000', category: 'Electronics' },
                { productId: 3, productName: 'Gaming Laptop', category: 'Computers' }
            ]);
        }, 1000);
    });
};

// Example API Route - AI Chat Support API
app.post('/api/chat-support', async (req, res) => {
    const { message } = req.body; // Get message from request body

    try {
        // Simulate AI response
        const aiResponse = await getAIResponse(message);

        return res.json({
            status: 'success',
            message: 'AI response fetched successfully',
            data: aiResponse
        });
    } catch (error) {
        return res.status(500).json({
            status: 'error',
            message: 'Failed to fetch AI response',
            error: error.message
        });
    }
});

// Function to simulate AI response
const getAIResponse = async (message) => {
    // Simulate a delay as if calling an AI model
    return new Promise((resolve) => {
        setTimeout(() => {
            if (message.toLowerCase().includes('order')) {
                resolve('I can assist you with placing an order. Please specify the item.');
            } else if (message.toLowerCase().includes('support')) {
                resolve('I am here to assist you with any issues you may have!');
            } else {
                resolve('Sorry, I didnâ€™t understand that. Can you rephrase your question?');
            }
        }, 1000);
    });
};

// API Route for Vendor Registration
app.post('/api/vendor-register', async (req, res) => {
    const { name, email, storeName } = req.body;

    try {
        // Simulate a successful vendor registration
        const vendorRegistration = await registerVendor(name, email, storeName);

        return res.json({
            status: 'success',
            message: 'Vendor registered successfully',
            data: vendorRegistration
        });
    } catch (error) {
        return res.status(500).json({
            status: 'error',
            message: 'Failed to register vendor',
            error: error.message
        });
    }
});

// Function to simulate vendor registration
const registerVendor = async (name, email, storeName) => {
    // Simulating a delay and saving vendor details to the database
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve({
                vendorId: 101,
                name: name,
                email: email,
                storeName: storeName,
                status: 'active'
            });
        }, 1000);
    });
};

// Start the server
app.listen(port, () => {
    console.log(`Trendify AI backend is running on port ${port}`);
});
